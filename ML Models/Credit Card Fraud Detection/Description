# Credit Card Fraud Detection Model

## Overview

This repository contains a machine learning model for credit card fraud detection. The model is trained on a dataset of credit card transactions, where each transaction is labeled as either fraudulent or non-fraudulent. The goal of the model is to accurately predict fraudulent transactions and assist in the detection of potential credit card fraud.

## Dataset

The dataset used for training and testing the model is obtained from Kaggle and can be found here: [creditcardfraud](https://www.kaggle.com/mlg-ulb/creditcardfraud). It contains anonymized credit card transactions with 30 numerical features (V1 to V28), a time variable (Time), an amount variable (Amount), and the target variable (Class) indicating whether the transaction is fraudulent (Class = 1) or non-fraudulent (Class = 0).

## Model Building

The model is built using Python and several popular libraries for machine learning, including:

- pandas: Data manipulation and analysis
- numpy: Numerical computing
- matplotlib and seaborn: Data visualization
- plotly: Interactive visualizations
- scikit-learn: Machine learning algorithms and evaluation metrics
- lightgbm: Light Gradient Boosting Machine
- xgboost: eXtreme Gradient Boosting

## Model Architecture

The model building process involves the following steps:

1. Data Loading and Exploration: Load the dataset, explore its structure, and visualize key features.

2. Data Preprocessing: Handle missing values, scale numerical features, and encode categorical variables (if any).

3. Feature Engineering: Create additional relevant features or transform existing ones to enhance the model's performance.

4. Model Selection: Choose the appropriate machine learning algorithm(s) for the problem. In this project, we compare the performance of Random Forest, LightGBM, and XGBoost classifiers.

5. Model Training: Train the selected models on the training data using cross-validation to optimize their hyperparameters.

6. Model Evaluation: Evaluate the model's performance on a validation set using various metrics, such as AUC, accuracy, and the confusion matrix.

7. Model Deployment: Select the best-performing model and deploy it for real-time fraud detection.

## Instructions

To run this project:

1. Install the required libraries mentioned in the `requirements.txt` file:

```bash
pip install -r requirements.txt
